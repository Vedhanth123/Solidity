{
  "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "AddressToValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "Owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "OwnerWithdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "Users",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getValueOfEth",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minimumWei",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sendEth",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "userWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x01e3dbba4179b6349dd14dd98929c9c2e65412b95966e172b31c5c515a41c554",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "transactionIndex": 0,
    "gasUsed": "750382",
    "logsBloom": "0x
    "blockHash": "0xc903f14be729d110467b4deeb3051cd90d2de479ab075428a2a2fe776f44049d",
    "transactionHash": "0x01e3dbba4179b6349dd14dd98929c9c2e65412b95966e172b31c5c515a41c554",
    "logs": [],
    "blockNumber": 2,
    "cumulativeGasUsed": "750382",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3"
  ],
  "numDeployments": 1,
  "solcInputHash": "2cb7ac66a48109c79b3f32f25a88528d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"AddressToValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OwnerWithdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"Users\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getValueOfEth\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumWei\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sendEth\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"userWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0xf2b6c9adb3552254df1445b73563cf014434ff5e78663e9b961b6c059506ceb5\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\n// Contract which does these things:\\r\\n// 1) Users send ether into this contract to store their ether\\r\\n// 2) Owner can withdraw the amount\\r\\n// 3) Users can take their ether back from this contract\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\r\\n\\r\\ncontract FundMe {\\r\\n\\r\\n    address public immutable Owner;\\r\\n    address[] public Users;\\r\\n    mapping (address => uint) public AddressToValue;\\r\\n    int256 public minimumWei;\\r\\n    AggregatorV3Interface contractInstance;\\r\\n\\r\\n    // Constructor which acts when the contract is being deployed and stores the address of the Owner in a variable\\r\\n    constructor(address contractAddress) {\\r\\n        Owner = payable(msg.sender);\\r\\n        contractInstance = AggregatorV3Interface(contractAddress);\\r\\n    }\\r\\n\\r\\n    // 1) Users send ether into this contract\\r\\n    function sendEth () public payable returns (string memory) {\\r\\n\\r\\n        // We are setting the minimum amount that a user need to send to this contract\\r\\n        require(msg.value >= uint(minimumWei), \\\"Eth amount too low!\\\");\\r\\n        \\r\\n        // Storing the users addresses in an array\\r\\n        Users.push(msg.sender);\\r\\n\\r\\n        return \\\"Eth sent successfully!\\\";\\r\\n    } \\r\\n\\r\\n    // 2) Owner can withdraw the amount\\r\\n    function OwnerWithdraw () public payable {\\r\\n\\r\\n        // Only the Owner can withdraw the amount\\r\\n        require(msg.sender == Owner, \\\"You cannot withdraw all the funds only Owner can withdraw all the funds\\\");\\r\\n\\r\\n        // To send Eth from contract to the Owner use call method\\r\\n        // convert address of the Owner to payable\\r\\n        (bool success, bytes memory data) = Owner.call{value: address(this).balance}(\\\"\\\");\\r\\n\\r\\n        // We then update the balances of all the users in the contract\\r\\n        for (uint i = 0; i < Users.length; i++) {\\r\\n            AddressToValue[Users[i]] = 0;\\r\\n        }\\r\\n\\r\\n    }\\r\\n\\r\\n    // 3) Users can take their money back from this contract\\r\\n    function userWithdraw () public {\\r\\n\\r\\n        // Convert the user address to payable address\\r\\n        address UserAddress = msg.sender;\\r\\n        (bool success, bytes memory data) = UserAddress.call{value: AddressToValue[UserAddress]}(\\\"\\\");\\r\\n\\r\\n    }\\r\\n\\r\\n    // function which gets data about value of ETH for 10$\\r\\n    function getValueOfEth() public payable {\\r\\n        (\\r\\n            ,\\r\\n            int256 _answer,\\r\\n            ,\\r\\n            ,\\r\\n            \\r\\n        ) = contractInstance.latestRoundData();\\r\\n        minimumWei = _answer / (10 ** 8);\\r\\n        minimumWei = (10**18) * 10/minimumWei;\\r\\n    }\\r\\n}\",\"keccak256\":\"0x1dde23a3a27ac34a9dfcf37827551ffc8db0bf71c23c32b8c323ec7ffd9d7c9c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b50604051610d92380380610d92833981810160405281019061003291906100c5565b3373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b8152505080600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050610137565b6000815190506100bf81610120565b92915050565b6000602082840312156100d757600080fd5b60006100e5848285016100b0565b91505092915050565b60006100f982610100565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b610129816100ee565b811461013457600080fd5b50565b60805160601c610c2f610163600039600081816102bf0152818161035001526106570152610c2f6000f3fe60806040526004361061007b5760003560e01c8063a646f9ad1161004e578063a646f9ad14610122578063aeeec60e14610139578063b4a99a4e14610143578063e0e267e51461016e5761007b565b806306e99fef146100805780631e98fd1c1461009e5780632c84d560146100db578063735441f1146100e5575b600080fd5b610088610199565b6040516100959190610948565b60405180910390f35b3480156100aa57600080fd5b506100c560048036038101906100c09190610711565b61027e565b6040516100d29190610912565b60405180910390f35b6100e36102bd565b005b3480156100f157600080fd5b5061010c600480360381019061010791906106e8565b6104a9565b60405161011991906109aa565b60405180910390f35b34801561012e57600080fd5b506101376104c1565b005b610141610578565b005b34801561014f57600080fd5b50610158610655565b6040516101659190610912565b60405180910390f35b34801561017a57600080fd5b50610183610679565b604051610190919061092d565b60405180910390f35b60606002543410156101e0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101d79061098a565b60405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506040518060400160405280601681526020017f4574682073656e74207375636365737366756c6c792100000000000000000000815250905090565b6000818154811061028e57600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461034b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103429061096a565b60405180910390fd5b6000807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1647604051610392906108fd565b60006040518083038185875af1925050503d80600081146103cf576040519150601f19603f3d011682016040523d82523d6000602084013e6103d4565b606091505b509150915060005b6000805490508110156104a457600060016000808481548110610428577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550808061049c90610ae5565b9150506103dc565b505050565b60016020528060005260406000206000915090505481565b60003390506000808273ffffffffffffffffffffffffffffffffffffffff16600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205460405161052c906108fd565b60006040518083038185875af1925050503d8060008114610569576040519150601f19603f3d011682016040523d82523d6000602084013e61056e565b606091505b5091509150505050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b1580156105e257600080fd5b505afa1580156105f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061061a919061073a565b5050509150506305f5e1008161063091906109ec565b600281905550600254678ac7230489e8000061064c91906109ec565b60028190555050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60025481565b60008135905061068e81610b9d565b92915050565b6000815190506106a381610bb4565b92915050565b6000813590506106b881610bcb565b92915050565b6000815190506106cd81610bcb565b92915050565b6000815190506106e281610be2565b92915050565b6000602082840312156106fa57600080fd5b60006107088482850161067f565b91505092915050565b60006020828403121561072357600080fd5b6000610731848285016106a9565b91505092915050565b600080600080600060a0868803121561075257600080fd5b6000610760888289016106d3565b955050602061077188828901610694565b9450506040610782888289016106be565b9350506060610793888289016106be565b92505060806107a4888289016106d3565b9150509295509295909350565b6107ba81610a56565b82525050565b6107c981610a68565b82525050565b60006107da826109c5565b6107e481856109db565b93506107f4818560208601610ab2565b6107fd81610b8c565b840191505092915050565b60006108156047836109db565b91507f596f752063616e6e6f7420776974686472617720616c6c207468652066756e6460008301527f73206f6e6c79204f776e65722063616e20776974686472617720616c6c20746860208301527f652066756e6473000000000000000000000000000000000000000000000000006040830152606082019050919050565b60006108a16013836109db565b91507f45746820616d6f756e7420746f6f206c6f7721000000000000000000000000006000830152602082019050919050565b60006108e16000836109d0565b9150600082019050919050565b6108f781610a92565b82525050565b6000610908826108d4565b9150819050919050565b600060208201905061092760008301846107b1565b92915050565b600060208201905061094260008301846107c0565b92915050565b6000602082019050818103600083015261096281846107cf565b905092915050565b6000602082019050818103600083015261098381610808565b9050919050565b600060208201905081810360008301526109a381610894565b9050919050565b60006020820190506109bf60008301846108ee565b92915050565b600081519050919050565b600081905092915050565b600082825260208201905092915050565b60006109f782610a68565b9150610a0283610a68565b925082610a1257610a11610b5d565b5b600160000383147f800000000000000000000000000000000000000000000000000000000000000083141615610a4b57610a4a610b2e565b5b828205905092915050565b6000610a6182610a72565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600069ffffffffffffffffffff82169050919050565b60005b83811015610ad0578082015181840152602081019050610ab5565b83811115610adf576000848401525b50505050565b6000610af082610a92565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610b2357610b22610b2e565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000601f19601f8301169050919050565b610ba681610a56565b8114610bb157600080fd5b50565b610bbd81610a68565b8114610bc857600080fd5b50565b610bd481610a92565b8114610bdf57600080fd5b50565b610beb81610a9c565b8114610bf657600080fd5b5056fea26469706673582212209cc536105eccb5f9ef41b870247dd7739ea4db20c731d7b7c5ea28e07c1e694564736f6c63430008000033",
  "deployedBytecode": "0x60806040526004361061007b5760003560e01c8063a646f9ad1161004e578063a646f9ad14610122578063aeeec60e14610139578063b4a99a4e14610143578063e0e267e51461016e5761007b565b806306e99fef146100805780631e98fd1c1461009e5780632c84d560146100db578063735441f1146100e5575b600080fd5b610088610199565b6040516100959190610948565b60405180910390f35b3480156100aa57600080fd5b506100c560048036038101906100c09190610711565b61027e565b6040516100d29190610912565b60405180910390f35b6100e36102bd565b005b3480156100f157600080fd5b5061010c600480360381019061010791906106e8565b6104a9565b60405161011991906109aa565b60405180910390f35b34801561012e57600080fd5b506101376104c1565b005b610141610578565b005b34801561014f57600080fd5b50610158610655565b6040516101659190610912565b60405180910390f35b34801561017a57600080fd5b50610183610679565b604051610190919061092d565b60405180910390f35b60606002543410156101e0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101d79061098a565b60405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506040518060400160405280601681526020017f4574682073656e74207375636365737366756c6c792100000000000000000000815250905090565b6000818154811061028e57600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461034b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103429061096a565b60405180910390fd5b6000807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1647604051610392906108fd565b60006040518083038185875af1925050503d80600081146103cf576040519150601f19603f3d011682016040523d82523d6000602084013e6103d4565b606091505b509150915060005b6000805490508110156104a457600060016000808481548110610428577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550808061049c90610ae5565b9150506103dc565b505050565b60016020528060005260406000206000915090505481565b60003390506000808273ffffffffffffffffffffffffffffffffffffffff16600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205460405161052c906108fd565b60006040518083038185875af1925050503d8060008114610569576040519150601f19603f3d011682016040523d82523d6000602084013e61056e565b606091505b5091509150505050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b1580156105e257600080fd5b505afa1580156105f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061061a919061073a565b5050509150506305f5e1008161063091906109ec565b600281905550600254678ac7230489e8000061064c91906109ec565b60028190555050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60025481565b60008135905061068e81610b9d565b92915050565b6000815190506106a381610bb4565b92915050565b6000813590506106b881610bcb565b92915050565b6000815190506106cd81610bcb565b92915050565b6000815190506106e281610be2565b92915050565b6000602082840312156106fa57600080fd5b60006107088482850161067f565b91505092915050565b60006020828403121561072357600080fd5b6000610731848285016106a9565b91505092915050565b600080600080600060a0868803121561075257600080fd5b6000610760888289016106d3565b955050602061077188828901610694565b9450506040610782888289016106be565b9350506060610793888289016106be565b92505060806107a4888289016106d3565b9150509295509295909350565b6107ba81610a56565b82525050565b6107c981610a68565b82525050565b60006107da826109c5565b6107e481856109db565b93506107f4818560208601610ab2565b6107fd81610b8c565b840191505092915050565b60006108156047836109db565b91507f596f752063616e6e6f7420776974686472617720616c6c207468652066756e6460008301527f73206f6e6c79204f776e65722063616e20776974686472617720616c6c20746860208301527f652066756e6473000000000000000000000000000000000000000000000000006040830152606082019050919050565b60006108a16013836109db565b91507f45746820616d6f756e7420746f6f206c6f7721000000000000000000000000006000830152602082019050919050565b60006108e16000836109d0565b9150600082019050919050565b6108f781610a92565b82525050565b6000610908826108d4565b9150819050919050565b600060208201905061092760008301846107b1565b92915050565b600060208201905061094260008301846107c0565b92915050565b6000602082019050818103600083015261096281846107cf565b905092915050565b6000602082019050818103600083015261098381610808565b9050919050565b600060208201905081810360008301526109a381610894565b9050919050565b60006020820190506109bf60008301846108ee565b92915050565b600081519050919050565b600081905092915050565b600082825260208201905092915050565b60006109f782610a68565b9150610a0283610a68565b925082610a1257610a11610b5d565b5b600160000383147f800000000000000000000000000000000000000000000000000000000000000083141615610a4b57610a4a610b2e565b5b828205905092915050565b6000610a6182610a72565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600069ffffffffffffffffffff82169050919050565b60005b83811015610ad0578082015181840152602081019050610ab5565b83811115610adf576000848401525b50505050565b6000610af082610a92565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610b2357610b22610b2e565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000601f19601f8301169050919050565b610ba681610a56565b8114610bb157600080fd5b50565b610bbd81610a68565b8114610bc857600080fd5b50565b610bd481610a92565b8114610bdf57600080fd5b50565b610beb81610a9c565b8114610bf657600080fd5b5056fea26469706673582212209cc536105eccb5f9ef41b870247dd7739ea4db20c731d7b7c5ea28e07c1e694564736f6c63430008000033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 53,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "Users",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 57,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "AddressToValue",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 59,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "minimumWei",
        "offset": 0,
        "slot": "2",
        "type": "t_int256"
      },
      {
        "astId": 62,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "contractInstance",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(AggregatorV3Interface)45"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}